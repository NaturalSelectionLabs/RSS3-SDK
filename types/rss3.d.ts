// File ids
type RSS3ID = string; // Same as ethereum address
type RSS3ItemsListID = string; // `${RSS3ID}-list-items-${index}`
type RSS3LinksListID = string; // `${RSS3ID}-list-links.${links.type}-${index}`
type RSS3BacklinksListID = string; // `${RSS3ID}-list-backlinks.${backlinks.type}-${index}`
type RSS3AssetsListID = string; // `${RSS3ID}-list-assets-${index}`
type RSS3ItemBacklinksListID = string; // `${RSS3ID}-list-item.${item.index}.backlinks.${backlinks.type}-${index}`

type RSS3ItemID = string; // `${RSS3ID}-item-${index}`
type ThirdPartyAddress = string[]; // A series of url or ipfs hash that link to an identical file

type RSS3ListID = RSS3ItemsListID | RSS3LinksListID | RSS3BacklinksListID | RSS3AssetsListID | RSS3ItemBacklinksListID;
type RSS3FileID = RSS3ID | RSS3ListID; // Unique indicate for current file
type RSS3File = RSS3Index | RSS3List;

// Common attributes for each files
interface RSS3Base {
    version: 'rss3.io/version/v0.3.1'; // Proposal version for current file. It should be like `rss3.io/version/v1.0.0`
    id: RSS3FileID;
    date_created: string; // Specifies the created date in RFC 3339 format
    date_updated: string; // Specifies the updated date in RFC 3339 format
}

interface RSS3SignedBase extends RSS3Base {
    signature: string; // Signed by persona's private key; The signature content is the Keccak-256 hash of the array of object sorted by alphabetical and excluding objects containing `auto: true` field and the `signature` field itself(for example {a: "1", c: "2", b: {d: "3"}, e: {auto: true}} -> [["a", "1"], ["b", ["d", "3"]], ["c", "2"]]) or the string `Hi, RSS3. I'm your agent ${agent_id}` if using agent signature; Used for the object integration verification for both server side and persona side
    agent_id?: string; // A random ed25519 public key generated by the client
    agent_signature?: string; // A signature signed by `agent_id`'s private key, its content is the same as `signature`
}

interface RSS3UnsignedBase extends RSS3Base {
    auto: true;
}

// RSS3 index file, main entrance for a persona
interface RSS3Index extends RSS3SignedBase {
    id: RSS3ID;
    controller?: string; // A contract address indicating ownership of the file

    profile?: RSS3Profile;

    items?: RSS3ItemsListID;

    links?: RSS3Links[];

    backlinks?: {
        // Backlinks for this persona, for example: follow type of backlink means followers.
        auto: true;
        type: string; // The same as links.type
        list: RSS3BacklinksListID; // File ID of backlink list that belong to this type. See **RSS3List** for more details
    }[];

    assets?: RSS3AssetsListID;
}

interface RSS3Profile {
    name?: string;
    avatar?: ThirdPartyAddress;
    bio?: string;

    accounts?: RSS3Account[];
}

interface RSS3Account {
    tags?: string[];
    platform: string; // Platform name, for example: EVM+ or Twitter
    identity: string; // Platform identity, for example: 0x1234567890123456789012345678901234567890 or @username
    signature?: string; // Signature of [["address": id], ["identity": account.identity], ["platform", account.platform]], optional for no public-key cryptography platform
}

interface RSS3Links {
    tags?: string[];
    type: string; // Link type, for example: follow superfollow
    list?: RSS3LinksListID; // Personas who belong to this link
}

// RSS3 list files, used for list of links, backlinks, contexts, items, assets
type RSS3List = RSS3ItemsList | RSS3LinksList | RSS3AssetsList | RSS3BacklinksList | RSS3ItemBacklinksList;

type RSS3ItemsList = (RSS3SignedBase | RSS3UnsignedBase) & {
    id: RSS3ItemsListID;
    list?: RSS3Item[];
    list_next?: RSS3ItemsListID;
};

type RSS3AssetsList = (RSS3SignedBase | RSS3UnsignedBase) & {
    id: RSS3AssetsListID;
    list?: RSS3Asset[];
    list_next?: RSS3AssetsListID;
};

type RSS3LinksList = RSS3SignedBase & {
    id: RSS3LinksListID;
    list?: RSS3ID[];
    list_next?: RSS3LinksListID;
};

type RSS3BacklinksList = RSS3UnsignedBase & {
    id: RSS3BacklinksListID;
    list?: RSS3ID[];
    list_next?: RSS3BacklinksListID;
};

type RSS3ItemBacklinksList = RSS3UnsignedBase & {
    id: RSS3ItemBacklinksListID;
    list?: RSS3ItemID[];
    list_next?: RSS3ItemBacklinksListID;
};

// Asset
type RSS3Asset = RSS3UserAsset | RSS3NodeAsset;

interface RSS3AssetBase {
    platform: string; // Corresponding to profile.accounts.platform
    identity: string; // Corresponding to profile.accounts.identity
    id: string; // Unique asset ID
    type: string; // Asset type, for example: Ethereum-NFT xDai-POAP
}

interface RSS3UserAsset extends RSS3AssetBase {
    tags?: string[];
    platform: 'custom'; // Corresponding to profile.accounts.platform
}

interface RSS3NodeAsset extends RSS3AssetBase {
    auto: true;
}

// Item
type RSS3Item = RSS3UserItem | RSS3NodeItem;

interface RSS3ItemBase {
    id: RSS3ItemID;
    date_published: string; // Specifies the published date in RFC 3339 format
    date_modified: string; // Specifies the modified date in RFC 3339 format

    backlinks?: {
        // Interactive items from other personas.
        auto: true;
        type: string;
        list: RSS3ItemBacklinksListID; // File ID of items list that belong to this context. See **RSS3List** for more details
    }[];
}

// A type of content posted by persona itself
interface RSS3UserItem extends RSS3ItemBase {
    tags?: string[];
    authors?: RSS3ID[];
    title?: string;
    summary?: string;

    link?: {
        type: string; // Link type for the non-original item, for example: comment like
        target: RSS3ItemID; // Target of the non-original item
    };

    contents?: {
        // Contents of current item, possibly multiple different types of content
        tags?: string[];
        address: ThirdPartyAddress;
        mime_type: string; // [MIME type](https://en.wikipedia.org/wiki/Media_type) of current content
        name?: string;
        size_in_bytes?: string;
        duration_in_seconds?: string;
    }[];
}

// A type of content that is automatically generated by a node to represent a change of an asset
interface RSS3NodeItem extends RSS3ItemBase {
    auto: true;
    account_platform: string; // Corresponding to profile.accounts.platform
    account_identity: string; // Corresponding to profile.accounts.identity
    asset_id: string; // Corresponding to asset.id
    asset_type: string; // Corresponding to asset.type
    asset_action: {
        type: string;
        target?: string;
    };
}
